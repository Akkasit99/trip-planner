import React, { useState, useEffect } from 'react';
import {
  View,
  Text,
  StyleSheet,
  ScrollView,
  TouchableOpacity,
  Image,
  SafeAreaView,
  ActivityIndicator,
  Alert,
} from 'react-native';
import { useNavigation, useRoute, RouteProp } from '@react-navigation/native';
import { StackNavigationProp } from '@react-navigation/stack';
import { RootStackParamList, Province, Attraction, Food, Activity } from '../types';
import { DatabaseService } from '../services/supabase';

type ProvinceDetailRouteProp = RouteProp<RootStackParamList, 'ProvinceDetail'>;
type ProvinceDetailNavigationProp = StackNavigationProp<
  RootStackParamList,
  'ProvinceDetail'
>;

const ProvinceDetailScreen: React.FC = () => {
  const navigation = useNavigation<ProvinceDetailNavigationProp>();
  const route = useRoute<ProvinceDetailRouteProp>();
  const { provinceId } = route.params;

  const [province, setProvince] = useState<Province | null>(null);
  const [attractions, setAttractions] = useState<Attraction[]>([]);
  const [foods, setFoods] = useState<Food[]>([]);
  const [activities, setActivities] = useState<Activity[]>([]);
  const [loading, setLoading] = useState(true);
  const [activeTab, setActiveTab] = useState<'attractions' | 'foods' | 'activities'>('attractions');

  // Mock data
  const mockProvince: Province = {
    id: provinceId,
    name: '‡πÄ‡∏ä‡∏µ‡∏¢‡∏á‡πÉ‡∏´‡∏°‡πà',
    name_en: 'Chiang Mai',
    region: 'north',
    description: '‡∏î‡∏¥‡∏ô‡πÅ‡∏î‡∏ô‡πÅ‡∏´‡πà‡∏á‡∏ß‡∏±‡∏í‡∏ô‡∏ò‡∏£‡∏£‡∏°‡∏•‡πâ‡∏≤‡∏ô‡∏ô‡∏≤‡πÅ‡∏•‡∏∞‡∏ò‡∏£‡∏£‡∏°‡∏ä‡∏≤‡∏ï‡∏¥‡∏ó‡∏µ‡πà‡∏™‡∏ß‡∏¢‡∏á‡∏≤‡∏° ‡πÄ‡∏ï‡πá‡∏°‡πÑ‡∏õ‡∏î‡πâ‡∏ß‡∏¢‡∏ß‡∏±‡∏î ‡πÇ‡∏ö‡∏£‡∏≤‡∏ì‡∏™‡∏ñ‡∏≤‡∏ô ‡πÅ‡∏•‡∏∞‡∏†‡∏π‡πÄ‡∏Ç‡∏≤‡∏ó‡∏µ‡πà‡∏á‡∏î‡∏á‡∏≤‡∏°',
    image_url: 'https://images.unsplash.com/photo-1578662996442-48f60103fc96?w=800',
    coordinates: { lat: 18.7883, lng: 98.9853 },
  };

  const mockAttractions: Attraction[] = [
    {
      id: '1',
      province_id: provinceId,
      name: '‡∏ß‡∏±‡∏î‡∏û‡∏£‡∏∞‡∏ò‡∏≤‡∏ï‡∏∏‡∏î‡∏≠‡∏¢‡∏™‡∏∏‡πÄ‡∏ó‡∏û',
      name_en: 'Wat Phra That Doi Suthep',
      type: 'temple',
      description: '‡∏ß‡∏±‡∏î‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡∏Ç‡∏≠‡∏á‡πÄ‡∏ä‡∏µ‡∏¢‡∏á‡πÉ‡∏´‡∏°‡πà ‡∏ï‡∏±‡πâ‡∏á‡∏≠‡∏¢‡∏π‡πà‡∏ö‡∏ô‡∏¢‡∏≠‡∏î‡∏î‡∏≠‡∏¢‡∏™‡∏∏‡πÄ‡∏ó‡∏û',
      image_url: 'https://images.unsplash.com/photo-1570168007204-dfb528c6958f?w=400',
      coordinates: { lat: 18.8047, lng: 98.9217 },
      rating: 4.8,
      estimated_duration: 3,
      entrance_fee: 50,
      opening_hours: '06:00 - 18:00',
    },
    {
      id: '2',
      province_id: provinceId,
      name: '‡∏ï‡∏•‡∏≤‡∏î‡∏ß‡∏≠‡∏£‡πå‡∏Å‡∏Å‡∏¥‡πâ‡∏á‡∏™‡∏ï‡∏£‡∏µ‡∏ó',
      name_en: 'Walking Street Market',
      type: 'market',
      description: '‡∏ï‡∏•‡∏≤‡∏î‡πÄ‡∏î‡∏¥‡∏ô‡∏Ñ‡∏∑‡∏ô‡∏ß‡∏±‡∏ô‡∏≠‡∏≤‡∏ó‡∏¥‡∏ï‡∏¢‡πå‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏Ç‡∏≠‡∏á‡πÄ‡∏ä‡∏µ‡∏¢‡∏á‡πÉ‡∏´‡∏°‡πà',
      image_url: 'https://images.unsplash.com/photo-1578662996442-48f60103fc96?w=400',
      coordinates: { lat: 18.7883, lng: 98.9853 },
      rating: 4.5,
      estimated_duration: 4,
      entrance_fee: 0,
      opening_hours: '‡∏ß‡∏±‡∏ô‡∏≠‡∏≤‡∏ó‡∏¥‡∏ï‡∏¢‡πå 16:00 - 22:00',
    },
  ];

  const mockFoods: Food[] = [
    {
      id: '1',
      province_id: provinceId,
      name: '‡∏Ç‡πâ‡∏≤‡∏ß‡∏ã‡∏≠‡∏¢',
      name_en: 'Khao Soi',
      type: 'local_dish',
      description: '‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏û‡∏∑‡πâ‡∏ô‡πÄ‡∏°‡∏∑‡∏≠‡∏á‡πÄ‡∏ä‡∏µ‡∏¢‡∏á‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏™‡∏µ‡∏¢‡∏á ‡πÄ‡∏™‡πâ‡∏ô‡πÉ‡∏´‡∏ç‡πà‡πÉ‡∏ô‡∏ô‡πâ‡∏≥‡πÅ‡∏Å‡∏á‡∏Å‡∏∞‡∏ó‡∏¥',
      image_url: 'https://images.unsplash.com/photo-1578662996442-48f60103fc96?w=400',
      price_range: { min: 40, max: 80 },
      recommended_places: ['‡∏Ç‡πâ‡∏≤‡∏ß‡∏ã‡∏≠‡∏¢‡πÅ‡∏°‡πà‡∏™‡∏≤‡∏¢', '‡∏Ç‡πâ‡∏≤‡∏ß‡∏ã‡∏≠‡∏¢‡∏•‡∏≥‡∏î‡∏ß‡∏ô'],
    },
    {
      id: '2',
      province_id: provinceId,
      name: '‡πÅ‡∏Å‡∏á‡∏Æ‡∏±‡∏á‡πÄ‡∏•',
      name_en: 'Gaeng Hang Le',
      type: 'local_dish',
      description: '‡πÅ‡∏Å‡∏á‡∏û‡∏∑‡πâ‡∏ô‡πÄ‡∏°‡∏∑‡∏≠‡∏á‡∏•‡πâ‡∏≤‡∏ô‡∏ô‡∏≤ ‡∏£‡∏™‡∏ä‡∏≤‡∏ï‡∏¥‡πÄ‡∏Ç‡πâ‡∏°‡∏Ç‡πâ‡∏ô ‡∏´‡∏ß‡∏≤‡∏ô‡∏ô‡∏¥‡∏î‡πÜ',
      image_url: 'https://images.unsplash.com/photo-1578662996442-48f60103fc96?w=400',
      price_range: { min: 60, max: 120 },
      recommended_places: ['‡∏£‡πâ‡∏≤‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏û‡∏∑‡πâ‡∏ô‡πÄ‡∏°‡∏∑‡∏≠‡∏á', '‡∏ï‡∏•‡∏≤‡∏î‡∏ï‡πâ‡∏ô‡∏ú‡∏¢‡∏≠‡∏á'],
    },
  ];

  const mockActivities: Activity[] = [
    {
      id: '1',
      province_id: provinceId,
      name: '‡∏Ç‡∏µ‡πà‡∏ä‡πâ‡∏≤‡∏á‡πÅ‡∏•‡∏∞‡∏≠‡∏≤‡∏ö‡∏ô‡πâ‡∏≥‡∏ä‡πâ‡∏≤‡∏á',
      name_en: 'Elephant Riding and Bathing',
      type: 'adventure',
      description: '‡∏õ‡∏£‡∏∞‡∏™‡∏ö‡∏Å‡∏≤‡∏£‡∏ì‡πå‡πÉ‡∏Å‡∏•‡πâ‡∏ä‡∏¥‡∏î‡∏Å‡∏±‡∏ö‡∏ä‡πâ‡∏≤‡∏á‡πÉ‡∏ô‡∏™‡∏†‡∏≤‡∏û‡πÅ‡∏ß‡∏î‡∏•‡πâ‡∏≠‡∏°‡∏ò‡∏£‡∏£‡∏°‡∏ä‡∏≤‡∏ï‡∏¥',
      image_url: 'https://images.unsplash.com/photo-1578662996442-48f60103fc96?w=400',
      duration: 4,
      difficulty_level: 'easy',
      price_range: { min: 1500, max: 3000 },
      season: '‡∏ï‡∏•‡∏≠‡∏î‡∏õ‡∏µ',
    },
    {
      id: '2',
      province_id: provinceId,
      name: '‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏ß‡∏î‡∏≠‡∏¢‡∏≠‡∏¥‡∏ô‡∏ó‡∏ô‡∏ô‡∏ó‡πå',
      name_en: 'Doi Inthanon National Park',
      type: 'hiking',
      description: '‡∏¢‡∏≠‡∏î‡πÄ‡∏Ç‡∏≤‡∏ó‡∏µ‡πà‡∏™‡∏π‡∏á‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡πÉ‡∏ô‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÑ‡∏ó‡∏¢ ‡∏ä‡∏°‡∏û‡∏£‡∏∞‡∏≠‡∏≤‡∏ó‡∏¥‡∏ï‡∏¢‡πå‡∏Ç‡∏∂‡πâ‡∏ô',
      image_url: 'https://images.unsplash.com/photo-1578662996442-48f60103fc96?w=400',
      duration: 8,
      difficulty_level: 'medium',
      price_range: { min: 800, max: 1500 },
      season: '‡∏ï‡∏∏‡∏•‡∏≤‡∏Ñ‡∏° - ‡∏Å‡∏∏‡∏°‡∏†‡∏≤‡∏û‡∏±‡∏ô‡∏ò‡πå',
    },
  ];

  useEffect(() => {
    loadProvinceData();
  }, [provinceId]);

  const loadProvinceData = async () => {
    try {
      setLoading(true);
      // ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• mock ‡∏Å‡πà‡∏≠‡∏ô
      setProvince(mockProvince);
      setAttractions(mockAttractions);
      setFoods(mockFoods);
      setActivities(mockActivities);
    } catch (error) {
      console.error('Error loading province data:', error);
      Alert.alert('‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î', '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ');
    } finally {
      setLoading(false);
    }
  };

  const handleCreateTrip = () => {
    navigation.navigate('CreateTrip', { provinceId });
  };

  const renderAttractionItem = (item: Attraction) => (
    <View key={item.id} style={styles.itemCard}>
      <Image source={{ uri: item.image_url }} style={styles.itemImage} />
      <View style={styles.itemInfo}>
        <Text style={styles.itemName}>{item.name}</Text>
        <Text style={styles.itemNameEn}>{item.name_en}</Text>
        <Text style={styles.itemDescription}>{item.description}</Text>
        <View style={styles.itemDetails}>
          <Text style={styles.itemDetail}>‚≠ê {item.rating}</Text>
          <Text style={styles.itemDetail}>‚è±Ô∏è {item.estimated_duration} ‡∏ä‡∏°.</Text>
          <Text style={styles.itemDetail}>üí∞ {item.entrance_fee === 0 ? '‡∏ü‡∏£‡∏µ' : `${item.entrance_fee} ‡∏ö‡∏≤‡∏ó`}</Text>
        </View>
      </View>
    </View>
  );

  const renderFoodItem = (item: Food) => (
    <View key={item.id} style={styles.itemCard}>
      <Image source={{ uri: item.image_url }} style={styles.itemImage} />
      <View style={styles.itemInfo}>
        <Text style={styles.itemName}>{item.name}</Text>
        <Text style={styles.itemNameEn}>{item.name_en}</Text>
        <Text style={styles.itemDescription}>{item.description}</Text>
        <View style={styles.itemDetails}>
          <Text style={styles.itemDetail}>üí∞ {item.price_range.min}-{item.price_range.max} ‡∏ö‡∏≤‡∏ó</Text>
        </View>
        <Text style={styles.recommendedPlaces}>
          ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥: {item.recommended_places.join(', ')}
        </Text>
      </View>
    </View>
  );

  const renderActivityItem = (item: Activity) => (
    <View key={item.id} style={styles.itemCard}>
      <Image source={{ uri: item.image_url }} style={styles.itemImage} />
      <View style={styles.itemInfo}>
        <Text style={styles.itemName}>{item.name}</Text>
        <Text style={styles.itemNameEn}>{item.name_en}</Text>
        <Text style={styles.itemDescription}>{item.description}</Text>
        <View style={styles.itemDetails}>
          <Text style={styles.itemDetail}>‚è±Ô∏è {item.duration} ‡∏ä‡∏°.</Text>
          <Text style={styles.itemDetail}>üìä {item.difficulty_level}</Text>
          <Text style={styles.itemDetail}>üí∞ {item.price_range.min}-{item.price_range.max} ‡∏ö‡∏≤‡∏ó</Text>
        </View>
        <Text style={styles.seasonText}>‡∏§‡∏î‡∏π‡∏Å‡∏≤‡∏•: {item.season}</Text>
      </View>
    </View>
  );

  if (loading) {
    return (
      <View style={styles.loadingContainer}>
        <ActivityIndicator size="large" color="#2563eb" />
        <Text style={styles.loadingText}>‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•...</Text>
      </View>
    );
  }

  if (!province) {
    return (
      <View style={styles.errorContainer}>
        <Text style={styles.errorText}>‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î</Text>
      </View>
    );
  }

  return (
    <SafeAreaView style={styles.container}>
      <ScrollView showsVerticalScrollIndicator={false}>
        {/* Header Image */}
        <View style={styles.headerContainer}>
          <Image source={{ uri: province.image_url }} style={styles.headerImage} />
          <View style={styles.headerOverlay}>
            <Text style={styles.provinceName}>{province.name}</Text>
            <Text style={styles.provinceNameEn}>{province.name_en}</Text>
          </View>
        </View>

        {/* Province Info */}
        <View style={styles.infoContainer}>
          <Text style={styles.description}>{province.description}</Text>
          
          <TouchableOpacity style={styles.createTripButton} onPress={handleCreateTrip}>
            <Text style={styles.createTripButtonText}>‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ó‡∏£‡∏¥‡∏õ‡πÉ‡∏ô‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î‡∏ô‡∏µ‡πâ</Text>
          </TouchableOpacity>
        </View>

        {/* Tabs */}
        <View style={styles.tabContainer}>
          <TouchableOpacity
            style={[styles.tab, activeTab === 'attractions' && styles.activeTab]}
            onPress={() => setActiveTab('attractions')}
          >
            <Text style={[styles.tabText, activeTab === 'attractions' && styles.activeTabText]}>
              ‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡πà‡∏≠‡∏á‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏ß
            </Text>
          </TouchableOpacity>
          <TouchableOpacity
            style={[styles.tab, activeTab === 'foods' && styles.activeTab]}
            onPress={() => setActiveTab('foods')}
          >
            <Text style={[styles.tabText, activeTab === 'foods' && styles.activeTabText]}>
              ‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ó‡πâ‡∏≠‡∏á‡∏ñ‡∏¥‡πà‡∏ô
            </Text>
          </TouchableOpacity>
          <TouchableOpacity
            style={[styles.tab, activeTab === 'activities' && styles.activeTab]}
            onPress={() => setActiveTab('activities')}
          >
            <Text style={[styles.tabText, activeTab === 'activities' && styles.activeTabText]}>
              ‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°
            </Text>
          </TouchableOpacity>
        </View>

        {/* Content */}
        <View style={styles.contentContainer}>
          {activeTab === 'attractions' && attractions.map(renderAttractionItem)}
          {activeTab === 'foods' && foods.map(renderFoodItem)}
          {activeTab === 'activities' && activities.map(renderActivityItem)}
        </View>
      </ScrollView>
    </SafeAreaView>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#f8fafc',
  },
  loadingContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: '#f8fafc',
  },
  loadingText: {
    marginTop: 16,
    fontSize: 16,
    color: '#64748b',
  },
  errorContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: '#f8fafc',
  },
  errorText: {
    fontSize: 18,
    color: '#ef4444',
  },
  headerContainer: {
    position: 'relative',
  },
  headerImage: {
    width: '100%',
    height: 250,
  },
  headerOverlay: {
    position: 'absolute',
    bottom: 0,
    left: 0,
    right: 0,
    backgroundColor: 'rgba(0, 0, 0, 0.5)',
    padding: 20,
  },
  provinceName: {
    fontSize: 28,
    fontWeight: 'bold',
    color: '#fff',
    marginBottom: 4,
  },
  provinceNameEn: {
    fontSize: 16,
    color: '#e2e8f0',
  },
  infoContainer: {
    padding: 20,
    backgroundColor: '#fff',
  },
  description: {
    fontSize: 16,
    color: '#64748b',
    lineHeight: 24,
    marginBottom: 20,
  },
  createTripButton: {
    backgroundColor: '#2563eb',
    paddingVertical: 16,
    borderRadius: 12,
    alignItems: 'center',
  },
  createTripButtonText: {
    color: '#fff',
    fontSize: 16,
    fontWeight: 'bold',
  },
  tabContainer: {
    flexDirection: 'row',
    backgroundColor: '#fff',
    borderBottomWidth: 1,
    borderBottomColor: '#e2e8f0',
  },
  tab: {
    flex: 1,
    paddingVertical: 16,
    alignItems: 'center',
  },
  activeTab: {
    borderBottomWidth: 2,
    borderBottomColor: '#2563eb',
  },
  tabText: {
    fontSize: 14,
    color: '#64748b',
    fontWeight: '500',
  },
  activeTabText: {
    color: '#2563eb',
    fontWeight: 'bold',
  },
  contentContainer: {
    padding: 16,
  },
  itemCard: {
    backgroundColor: '#fff',
    borderRadius: 12,
    marginBottom: 16,
    overflow: 'hidden',
    elevation: 2,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 1 },
    shadowOpacity: 0.1,
    shadowRadius: 4,
  },
  itemImage: {
    width: '100%',
    height: 160,
  },
  itemInfo: {
    padding: 16,
  },
  itemName: {
    fontSize: 18,
    fontWeight: 'bold',
    color: '#1e293b',
    marginBottom: 4,
  },
  itemNameEn: {
    fontSize: 14,
    color: '#64748b',
    marginBottom: 8,
  },
  itemDescription: {
    fontSize: 14,
    color: '#64748b',
    lineHeight: 20,
    marginBottom: 12,
  },
  itemDetails: {
    flexDirection: 'row',
    flexWrap: 'wrap',
    marginBottom: 8,
  },
  itemDetail: {
    fontSize: 12,
    color: '#475569',
    backgroundColor: '#f1f5f9',
    paddingHorizontal: 8,
    paddingVertical: 4,
    borderRadius: 12,
    marginRight: 8,
    marginBottom: 4,
  },
  recommendedPlaces: {
    fontSize: 12,
    color: '#059669',
    fontStyle: 'italic',
  },
  seasonText: {
    fontSize: 12,
    color: '#7c3aed',
    fontStyle: 'italic',
  },
});

export default ProvinceDetailScreen;